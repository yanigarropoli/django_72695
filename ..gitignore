# Creado por https://www.toptal.com/developers/gitignore/api/python,django,visualstudiocode
# Editar en https://www.toptal.com/developers/gitignore?templates=python,django,visualstudiocode

### Django ###
*.registro
*.olla
*.pyc
__pycache__/
configuración_local.py
base de datos sqlite3
diario db.sqlite3
medios de comunicación

# Si su proceso de compilación incluye ejecutar collectstatic, entonces probablemente no necesite ni desee incluir staticfiles/
# en su repositorio Git. Actualice y descomente la siguiente línea según corresponda.
# <nombre-del-proyecto-django>/staticfiles/

### Pila de Django.Python ###
# Archivos DLL compilados en bytes y optimizados
*.py[código]
*$py.clase

# Extensiones C
*.entonces

# Distribución / embalaje
.Pitón
construir/
desarrollar-huevos/
distribución/
Descargas/
huevos/
.huevos/
lib/
lib64/
regiones/
distancia/
variedad/
ruedas/
compartir/ruedas-python/
*.huevo-info/
.instalado.cfg
*.huevo
MANIFIESTO

#Instalador de Py
# Generalmente, estos archivos se escriben mediante un script de Python a partir de una plantilla.
# antes de que PyInstaller construya el exe, para poder inyectarle fecha y otra información.
*.manifiesto
*.especulación

# Registros del instalador
archivo pip-log.txt
pip-eliminar-este-directorio.txt

# Informes de cobertura/pruebas unitarias
htmlcov/
.toxico/
.nox/
.cobertura
.cobertura.*
.cache
pruebas de nariz.xml
cobertura.xml
*.cubrir
*.py,portada
.hipótesis/
.pytest_cache/
cubrir/

# Traducciones
*.mes

# Cosas de Django:

# Cosas del matraz:
instancia/
.webassets-cache

# Cosas raras:
.desordenado

# Documentación de Sphinx
documentos/_build/

# Constructor de Py
.pybuilder/
objetivo/

# Cuaderno Jupyter
.ipynb_puntos de control

#IPython
perfil_predeterminado/
ipython_config.py

#pyenv
# Para una biblioteca o paquete, es posible que desees ignorar estos archivos ya que el código es
# destinado a ejecutarse en múltiples entornos; de lo contrario, regístrelos en:
# versión .python

#tubería
# Según pypa/pipenv#598, se recomienda incluir Pipfile.lock en el control de versiones.
# Sin embargo, en caso de colaboración, si hay dependencias o dependencias específicas de la plataforma
# al no tener soporte multiplataforma, pipenv puede instalar dependencias que no funcionan o no
#Instalar todas las dependencias necesarias.
#ArchivoPip.lock

# poesía
# Similar a Pipfile.lock, generalmente se recomienda incluir poetry.lock en el control de versiones.
# Esto se recomienda especialmente para paquetes binarios para garantizar la reproducibilidad y es más
# comúnmente ignorado por las bibliotecas.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poesía.bloqueo

#pdm
# Similar a Pipfile.lock, generalmente se recomienda incluir pdm.lock en el control de versiones.
#pdm.bloqueo
# pdm almacena configuraciones de todo el proyecto en .pdm.toml, pero se recomienda no incluirlo
# en control de versiones.
# https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; utilizado por ejemplo en github.com/David-OConnor/pyflow y github.com/pdm-project/pdm
__paquetespy__/

# Cosas de apio
horario de celerybeat
apiobeat.pid

# Archivos analizados por SageMath
*.sage.py

# Entornos
.env
.venv
env/
Vengador/
ENV/
env.bak/
venv.bak/

# Configuración del proyecto Spyder
Proyecto .spyder
.proyecto espía

# Configuración del proyecto de cuerda
.proyecto de cuerda

# Documentación de mkdocs
/sitio

#mipy
.mypy_cache/
.dmypy.json
dmypy.json

# Comprobador de tipo Pyre
.pira/

# analizador de tipos estático pytype
.pytype/

# Símbolos de depuración de Cython
depuración de cython/

#PyCharm
# La plantilla específica de JetBrains se mantiene en un JetBrains.gitignore separado que puede
# se puede encontrar en https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
# y se puede agregar al gitignore global o fusionarlo en este archivo. Para una versión más nuclear
# Opción (no recomendada) puedes descomentar lo siguiente para ignorar toda la carpeta de ideas.
#.idea/

### Pitón ###
# Archivos DLL compilados en bytes y optimizados

# Extensiones C

# Distribución / embalaje

#Instalador de Py
# Generalmente, estos archivos se escriben mediante un script de Python a partir de una plantilla.
# antes de que PyInstaller construya el exe, para poder inyectarle fecha y otra información.

# Registros del instalador

# Informes de cobertura/pruebas unitarias

# Traducciones

# Cosas de Django:

# Cosas del matraz:

# Cosas raras:

# Documentación de Sphinx

# Constructor de Py

# Cuaderno Jupyter

#IPython

#pyenv
# Para una biblioteca o paquete, es posible que desees ignorar estos archivos ya que el código es
# destinado a ejecutarse en múltiples entornos; de lo contrario, regístrelos en:
# versión .python

#tubería
# Según pypa/pipenv#598, se recomienda incluir Pipfile.lock en el control de versiones.
# Sin embargo, en caso de colaboración, si hay dependencias o dependencias específicas de la plataforma
# al no tener soporte multiplataforma, pipenv puede instalar dependencias que no funcionan o no
#Instalar todas las dependencias necesarias.

# poesía
# Similar a Pipfile.lock, generalmente se recomienda incluir poetry.lock en el control de versiones.
# Esto se recomienda especialmente para paquetes binarios para garantizar la reproducibilidad y es más
# comúnmente ignorado por las bibliotecas.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control

#pdm
# Similar a Pipfile.lock, generalmente se recomienda incluir pdm.lock en el control de versiones.
# pdm almacena configuraciones de todo el proyecto en .pdm.toml, pero se recomienda no incluirlo
# en control de versiones.
# https://pdm.fming.dev/#use-with-ide

# PEP 582; utilizado por ejemplo en github.com/David-OConnor/pyflow y github.com/pdm-project/pdm

# Cosas de apio

# Archivos analizados por SageMath

# Entornos

# Configuración del proyecto Spyder

# Configuración del proyecto de cuerda

# Documentación de mkdocs

#mipy

# Comprobador de tipo Pyre

# analizador de tipos estático pytype

# Símbolos de depuración de Cython

#PyCharm
# La plantilla específica de JetBrains se mantiene en un JetBrains.gitignore separado que puede
# se puede encontrar en https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
# y se puede agregar al gitignore global o fusionarlo en este archivo. Para una versión más nuclear
# Opción (no recomendada) puedes descomentar lo siguiente para ignorar toda la carpeta de ideas.

### Parche de Python ###
# Archivo de configuración local de Poetry: https://python-poetry.org/docs/configuration/#local-configuration
poesía.toml

# gruñido
.ruff_cache/

# Archivos de configuración LSP
pyrightconfig.json

### Código de Visual Studio ###
.vscode/*
!.vscode/configuraciones.json
!.vscode/tareas.json
!.vscode/launch.json
!.vscode/extensiones.json
!.vscode/*.fragmentos de código

# Historial local para Visual Studio Code
.historia/

# Extensiones de código de Visual Studio creadas
*.vsix

### Parche de VisualStudioCode ###
# Ignorar todo el historial local de archivos
.historia
.ionuro

# Fin de https://www.toptal.com/developers/gitignore/api/python,django,visualstudiocode

